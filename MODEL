import copy
import random


import networkx as nx

from database.DAO import DAO
from geopy.distance import distance


class Model:
    def __init__(self):
        self._graph = nx.Graph()

    def buildGraph(self, provider, soglia):

        self._nodes = DAO.getLocationsOfProvider(provider)
        self._graph.add_nodes_from(self._nodes)

        for u in self._nodes:
            for v in self._nodes:
                if u != v:
                    dist = distance((u.latitude, u.longitude),(v.latitude, v.longitude)).km
                    if dist < soglia:
                        self._graph.add_edge(u, v, weight=dist)



    def getNodesMostVicini(self):

        listTuples = []

        for v in self._nodes:
            num_neighbors = len(list(self._graph.neighbors(v)))
            listTuples.append((v, num_neighbors))

        listTuples.sort(key = lambda x:x[1], reverse=True)
        max_neighbors = listTuples[0][1]

        result = []
        for x in listTuples:
            if x[1] == max_neighbors:
                result.append(x)

        return result

    def getAllLocations(self):
        return self._graph.nodes




    def getGraphDetails(self):
        return self._graph.number_of_nodes(), self._graph.number_of_edges()

    def getPercorso(self, target, stringa):
        self._solBest = []
        self._lunBest = 0

        for node in self._graph.nodes:
            parziale = [node]
            self._ricorsione(parziale, stringa, target)

        return self._solBest

    def _ricorsione(self, parziale, stringa, target):

        if parziale[-1] == target:
            if len(parziale) > self._lunBest:
                self._lunBest = len(parziale)
                self._solBest = copy.deepcopy(parziale)
            return

        for node in self._graph.neighbors(parziale[-1]):
            if stringa not in node.Location and node not in parziale:
                parziale.append(node)
                self._ricorsione(parziale, stringa, target)
                parziale.pop()
