import flet as ft

from database.DAO import DAO


class Controller:
    def __init__(self, view, model):
        # the view, with the graphical elements of the UI
        self._view = view
        # the model, which implements the logic of the program and holds the data
        self._model = model

    def handleCreaGrafo(self, e):
        provider = self._view._ddProvider.value
        self._view._txt_result.controls.clear()
        if provider is None:
            self._view.create_alert('Seleziona un provider')
            return

        soglia = self._view._txtInDistanza.value
        if soglia == "":
            self._view._txt_result.controls.clear()
            self._view._txt_result.controls.append(ft.Text('Inserisci una distanza'))
            self._view.update_page()
            return

        try:
            sogliaFloat = float(soglia)

        except:
            self._view._txt_result.controls.clear()
            self._view._txt_result.controls.append(ft.Text("Attenzione, soglia inserita non numerica."))
            self._view.update_page()
            return

        self._model.buildGraph(provider, sogliaFloat)

        nNodes, nEdges = self._model.getGraphDetails()

        self._view._txt_result.controls.clear()
        self._view._txt_result.controls.append(
            ft.Text(f"Grafo correttamente creato. Il grafo ha {nNodes} nodi e {nEdges} archi."))

        self.fillDDTarget()

        self._view.update_page()

    def handleAnalizzaGrafo(self, e):

        nNodes, nEdges = self._model.getGraphDetails()

        if nNodes and nEdges == 0:
            self._view._txt_result.clear()
            self._view._txt_result.append(ft.Text('Grafo vuoto'))
            self._view.update_page()
            return

        lista = self._model.getNodesMostVicini()

        self._view._txt_result.controls.clear()
        self._view._txt_result.controls.append(ft.Text("Nodi con pi√π vicini:"))
        for l in lista:
            self._view._txt_result.controls.append(ft.Text(f"{l[0]}, #vicini={l[1]}"))

        self._view.update_page()


    def handleCalcolaPercorso(self, e):
        target = self._view._ddTarget.value
        stringa = self._view._txtInString.value

        if target is None:
            self._view.create_alert("Inserire un Target (t)")
            return

        if stringa is None:
            self._view.create_alert("Inserire una Stringa (s)")
            return

        self._model.getPercorso(target, stringa)
        self._view.update_page()

    def fillDDProvider(self):
        provider = DAO.getAllProviders()
        for p in provider:
            self._view._ddProvider.options.append(ft.dropdown.Option(f'{p}'))

    def fillDDTarget(self):
        locations = self._model.getAllLocations()
        for t in locations:
            self._view._ddTarget.options.append(ft.dropdown.Option(f'{t}'))

        self._view.update_page()
